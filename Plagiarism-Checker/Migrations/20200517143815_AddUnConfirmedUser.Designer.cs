// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Plagiarism_Checker;

namespace Plagiarism_Checker.Migrations
{
    [DbContext(typeof(UniverContext))]
    [Migration("20200517143815_AddUnConfirmedUser")]
    partial class AddUnConfirmedUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Plagiarism_Checker.Models.Applications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<bool>("IsTeacher")
                        .HasColumnName("isTeacher");

                    b.Property<string>("Name");

                    b.Property<string>("Nin")
                        .HasColumnName("nin");

                    b.Property<string>("Password");

                    b.Property<string>("StudentNumber")
                        .HasColumnName("student_number");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Plagiarism_Checker.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Deadline")
                        .HasColumnName("deadline")
                        .HasColumnType("datetime");

                    b.Property<string>("Requirenments")
                        .IsRequired()
                        .HasColumnName("requirenments")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("Plagiarism_Checker.Models.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Day1")
                        .IsRequired()
                        .HasColumnName("day")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Day");
                });

            modelBuilder.Entity("Plagiarism_Checker.Models.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("Discipline");
                });

            modelBuilder.Entity("Plagiarism_Checker.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(10);

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnName("student_id")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Plagiarism_Checker.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HwTaskId")
                        .HasColumnName("hw_task_id");

                    b.Property<int>("ScheduleId")
                        .HasColumnName("schedule_id");

                    b.Property<int>("TestTaskId")
                        .HasColumnName("test_task_id");

                    b.HasKey("Id");

                    b.HasIndex("HwTaskId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TestTaskId");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("Plagiarism_Checker.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DayId")
                        .HasColumnName("day_id");

                    b.Property<int>("DisciplineId")
                        .HasColumnName("discipline_id");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnName("teacher_id")
                        .HasMaxLength(450);

                    b.Property<int>("TimeId")
                        .HasColumnName("time_id");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TimeId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Plagiarism_Checker.Models.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnName("file");

                    b.HasKey("Id");

                    b.ToTable("Solution");
                });

            modelBuilder.Entity("Plagiarism_Checker.Models.StudentLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LessonId")
                        .HasColumnName("lesson_id");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnName("student_id")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Student_lesson");
                });

            modelBuilder.Entity("Plagiarism_Checker.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentId")
                        .HasColumnName("assignment_id");

                    b.Property<double>("Percent")
                        .HasColumnName("percent");

                    b.Property<int>("SolutionId")
                        .HasColumnName("solution_id");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("SolutionId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("Plagiarism_Checker.Models.Time", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan?>("Time1")
                        .HasColumnName("time")
                        .HasColumnType("time(0)");

                    b.HasKey("Id");

                    b.ToTable("Time");
                });

            modelBuilder.Entity("Plagiarism_Checker.Models.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Nin")
                        .HasColumnName("nin");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("StudentLessonId")
                        .HasColumnName("student_lesson_id");

                    b.Property<string>("StudentNumber")
                        .HasColumnName("student_number");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Plagiarism_Checker.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Plagiarism_Checker.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Plagiarism_Checker.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Plagiarism_Checker.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Plagiarism_Checker.Models.Lesson", b =>
                {
                    b.HasOne("Plagiarism_Checker.Models.Task", "HwTask")
                        .WithMany("LessonHwTask")
                        .HasForeignKey("HwTaskId")
                        .HasConstraintName("FK_Lesson_Task");

                    b.HasOne("Plagiarism_Checker.Models.Schedule", "Schedule")
                        .WithMany("Lesson")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK_Lesson_Schedule");

                    b.HasOne("Plagiarism_Checker.Models.Task", "TestTask")
                        .WithMany("LessonTestTask")
                        .HasForeignKey("TestTaskId")
                        .HasConstraintName("FK_Lesson_Task1");
                });

            modelBuilder.Entity("Plagiarism_Checker.Models.Schedule", b =>
                {
                    b.HasOne("Plagiarism_Checker.Models.Day", "Day")
                        .WithMany("Schedule")
                        .HasForeignKey("DayId")
                        .HasConstraintName("FK_Schedule_Day");

                    b.HasOne("Plagiarism_Checker.Models.Discipline", "Discipline")
                        .WithMany("Schedule")
                        .HasForeignKey("DisciplineId")
                        .HasConstraintName("FK_Schedule_Discipline");

                    b.HasOne("Plagiarism_Checker.Models.Group", "Group")
                        .WithMany("Schedule")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_Schedule_Group");

                    b.HasOne("Plagiarism_Checker.Models.User", "Teacher")
                        .WithMany("Schedule")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_Schedule_AspNetUsers");

                    b.HasOne("Plagiarism_Checker.Models.Time", "Time")
                        .WithMany("Schedule")
                        .HasForeignKey("TimeId")
                        .HasConstraintName("FK_Schedule_Time");
                });

            modelBuilder.Entity("Plagiarism_Checker.Models.StudentLesson", b =>
                {
                    b.HasOne("Plagiarism_Checker.Models.Lesson", "Lesson")
                        .WithMany("StudentLesson")
                        .HasForeignKey("LessonId")
                        .HasConstraintName("FK_Student_lesson_Lesson");

                    b.HasOne("Plagiarism_Checker.Models.User", "Student")
                        .WithMany("StudentLesson")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Student_lesson_AspNetUsers");
                });

            modelBuilder.Entity("Plagiarism_Checker.Models.Task", b =>
                {
                    b.HasOne("Plagiarism_Checker.Models.Assignment", "Assignment")
                        .WithMany("Task")
                        .HasForeignKey("AssignmentId")
                        .HasConstraintName("FK_Task_Assignment");

                    b.HasOne("Plagiarism_Checker.Models.Solution", "Solution")
                        .WithMany("Task")
                        .HasForeignKey("SolutionId")
                        .HasConstraintName("FK_Task_Solution");
                });
#pragma warning restore 612, 618
        }
    }
}
